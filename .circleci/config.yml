version: 2.1

jobs:
  build:
    docker:
      - image: circleci/node:15.0.1
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Show current branch
          command: echo ${CIRCLE_BRANCH}
      - restore_cache:
          keys:
            - app-{{ checksum "package.json" }}
            - app-
      - run:
          name: Install dependencies
          command: npm install
      - save_cache:
          paths:
            - node_modules
          key: app-{{ checksum "package.json" }}

  deploy-to-aws-s3:
    docker:
      - image: circleci/node:15.0.1
    working_directory: ~/repo
    steps:
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get update
            sudo apt-get install awscli
            sudo apt-get install -y python3-pip python3-dev build-essential
      - run:
          name: Build Project
          command: |
            npm install
            npm run build
            cd build
            zip -r ../build.zip * .[^.]*
            echo "Build successful"
      - run:
          name: Deploy to AWS S3
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_PRODUCTION} --delete
            elif [ "${CIRCLE_BRANCH}" == "staging" ]; then
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_STAGING} --delete
            elif [ "${CIRCLE_BRANCH}" == "development" ]; then
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_DEVELOPMENT} --delete
            else
              echo "Branch not found"
            fi

  deploy-to-aws-cloudfront:
    docker:
      - image: circleci/node:15.0.1
    working_directory: ~/repo
    steps:
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get update
            sudo apt-get install awscli
            sudo apt-get install -y python3-pip python3-dev build-essential
      - run:
          name: Deploy to AWS CloudFront
          command: |
            aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_DISTRIBUTION_ID} --paths "/*"

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - deploy-to-aws-s3:
          requires:
            - build
      - deploy-to-aws-cloudfront:
          requires:
            - deploy-to-aws-s3
            filters:
              branches:
                only:
                  - master
                  - staging
                  - development